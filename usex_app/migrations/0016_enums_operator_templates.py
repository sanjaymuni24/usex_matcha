# Generated by Django 4.2.21 on 2025-06-20 17:51

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('usex_app', '0015_datasource_skip_campaign_processing'),
    ]

    operations = [
        migrations.CreateModel(
            name='Enums',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the enum set.', max_length=100, unique=True)),
                ('options', models.JSONField(default=dict, help_text='Options for the enum set as key-value pairs.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the operator (e.g., Equal, Not Equal).', max_length=50, unique=True)),
                ('category', models.CharField(choices=[('comparison', 'Comparison'), ('arithmetic', 'Arithmetic'), ('logical', 'Logical'), ('string', 'String')], help_text='Category of the operator (e.g., Comparison, Arithmetic).', max_length=50)),
                ('description', models.TextField(help_text='Description of what the operator does.')),
                ('supported_datatypes_left', models.JSONField(default=list, help_text="List of supported data types for the left-hand operand (e.g., ['string', 'integer']).")),
                ('supported_datatypes_right', models.JSONField(default=list, help_text="List of supported data types for the right-hand operand (e.g., ['string', 'integer']).")),
                ('options', models.JSONField(blank=True, default=dict, help_text='Additional options for the operator (e.g., case sensitivity for string operators).', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Templates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the condition template.', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the condition template.')),
                ('field', models.CharField(help_text='Field to apply the condition on.', max_length=100)),
                ('operator', models.CharField(choices=[('equal_to', 'Equal To'), ('not_equal_to', 'Not Equal To'), ('greater_than', 'Greater Than'), ('less_than', 'Less Than'), ('contains', 'Contains'), ('starts_with', 'Starts With'), ('ends_with', 'Ends With')], help_text='Operator for the condition.', max_length=50)),
                ('value_type', models.CharField(choices=[('manual', 'Manual Entry'), ('enum', 'Enum Dropdown')], help_text='Type of value input for the condition.', max_length=50)),
                ('value', models.CharField(blank=True, help_text='Manual value or enum key.', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enum', models.ForeignKey(blank=True, help_text="Enum set to populate dropdown options if value_type is 'enum'.", null=True, on_delete=django.db.models.deletion.SET_NULL, to='usex_app.enums')),
            ],
        ),
    ]
